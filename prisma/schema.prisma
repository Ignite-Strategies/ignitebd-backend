// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firebaseId  String   @unique
  name        String
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  adminOf     Company[] @relation("AdminOf")
  staffOf     Company[] @relation("StaffOf")
  prospects   Prospect[]
  customers   Customer[]
  pipelineEntries BDPipelineEntry[] @relation("AssignedPipelineEntries")

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  address     String?
  annualRev   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  adminId     String
  admin       User     @relation("AdminOf", fields: [adminId], references: [id])
  staff       User[]   @relation("StaffOf")
  prospects   Prospect[]
  customers   Customer[]
  pipelineEntries BDPipelineEntry[]
  revenueStacks RevenueStack[]
  humanCapitalStacks HumanCapitalStack[]
  targetAcquisitionStacks TargetAcquisitionStack[]

  @@map("companies")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  assignedTo  String?
  assignedUser User?   @relation(fields: [assignedTo], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pipelineEntries BDPipelineEntry[] @relation("CustomerPipelineEntries")

  @@map("customers")
}

model Prospect {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  assignedTo  String?
  assignedUser User?   @relation(fields: [assignedTo], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pipelineEntries BDPipelineEntry[] @relation("ProspectPipelineEntries")

  @@map("prospects")
}

model BDPipelineEntry {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  customerId  String?  // Optional - if they're already a customer
  customer    Customer? @relation("CustomerPipelineEntries", fields: [customerId], references: [id])
  prospectId  String?  // Optional - if they're still a prospect
  prospect    Prospect? @relation("ProspectPipelineEntries", fields: [prospectId], references: [id])
  stage       String   // Pipeline stage (e.g., "aware", "interested", "qualified", "proposal", "closed_won", "closed_lost")
  status      String   // Status within stage (e.g., "active", "paused", "completed")
  value       Float?   // Deal value
  probability Float?   // Probability of closing (0-100)
  notes       String?  // Additional notes
  assignedTo  String?
  assignedUser User?   @relation("AssignedPipelineEntries", fields: [assignedTo], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bd_pipeline_entries")
}

model Assessment {
  id          String   @id @default(cuid())
  name        String
  company     String
  industry    String
  workTooMuch String   // Response to "Do you feel you work too much on tasks?"
  assignTasks String   // Response to "You adequately assign to others"
  wantMoreClients String // Response to "Do you want to bring on more clients?"
  revenueGrowthPercent Int? // Revenue growth percentage they want
  totalVolume Float?   // Total volume target
  bdSpend     Float?   // Current BD spend
  score       Int      // Calculated growth potential score
  insights    String?  // JSON string of insights
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assessments")
}

model PlatformProspect {
  id          String   @id @default(cuid())
  name        String
  email       String
  company     String
  industry    String
  workTooMuch String   // Response to "Do you feel you work too much on tasks?"
  assignTasks String   // Response to "You adequately assign to others"
  wantMoreClients String // Response to "Do you want to bring on more clients?"
  revenueGrowthPercent Int? // Revenue growth percentage they want
  totalVolume Float?   // Total volume target
  bdSpend     Float?   // Current BD spend
  score       Int      // Calculated growth potential score
  insights    String?  // JSON string of insights
  leadStatus  String   @default("new") // new, contacted, qualified, converted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("platform_prospects")
}

model RevenueStack {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Product Definition
  productName String
  
  // Unit Economics
  avgGrossPerUnit Float
  avgOrdersPerMonthPerCustomer Float
  
  // Volume Metrics
  totalCustomers Int
  
  // Calculated Fields
  totalUnitsPerMonth Float
  monthlyRevenue Float
  annualRevenue Float
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("revenue_stacks")
}

model HumanCapitalStack {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Team Structure
  totalTeamMembers Int
  avgHoursPerWeek Float
  founderHoursPerWeek Float?
  
  // Production Metrics
  hoursPerUnit Float
  totalUnitsPerMonth Int
  
  // Optional Advanced
  contractorHours Float?
  
  // Calculated Fields
  totalNeededHours Float
  teamCapacity Float
  totalCapacity Float
  utilization Float
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("human_capital_stacks")
}

model TargetAcquisitionStack {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Baseline Revenue
  previousRevenue Float
  currentMonthlyRevenue Float
  
  // Target Definition
  targetRevenue Float
  timeHorizon Int // months
  
  // Revenue Delta
  increaseNeeded Float
  growthPercent Float
  
  // Operational Targets (from Revenue Stack)
  avgUnitValue Float
  avgUnitsPerCustomer Float
  
  // Calculated Fields
  newUnitsNeeded Float
  newCustomersNeeded Float
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("target_acquisition_stacks")
}